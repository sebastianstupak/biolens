name: CI - Nightly Integration Tests

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      data_source:
        description: 'Specific data source to test (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - 'uniprot'
          - 'stringdb'
          - 'pdb'

jobs:
  setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Set matrix based on input
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.data_source }}" == "uniprot" ]; then
            echo 'matrix=["UniProt"]' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.data_source }}" == "stringdb" ]; then
            echo 'matrix=["StringDB"]' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.data_source }}" == "pdb" ]; then
            echo 'matrix=["PDB"]' >> $GITHUB_OUTPUT
          else
            echo 'matrix=["UniProt","StringDB","PDB"]' >> $GITHUB_OUTPUT
          fi

  integration-tests:
    name: Test ${{ matrix.datasource }}
    runs-on: ubuntu-latest
    needs: setup
    
    strategy:
      fail-fast: false
      matrix:
        datasource: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        id: test-run
        run: |
          dotnet test \
            --no-build \
            --configuration Release \
            --filter "Category=Contract&DataSource=${{ matrix.datasource }}" \
            --logger "trx;LogFileName=${{ matrix.datasource }}-results.trx" \
            --logger "console;verbosity=normal" \
            --results-directory ./TestResults
        continue-on-error: true

      - name: Parse results
        if: always()
        id: parse
        run: |
          if [ -f "./TestResults/${{ matrix.datasource }}-results.trx" ]; then
            total=$(grep -o 'total="[0-9]*"' "./TestResults/${{ matrix.datasource }}-results.trx" | head -1 | grep -o '[0-9]*')
            passed=$(grep -o 'passed="[0-9]*"' "./TestResults/${{ matrix.datasource }}-results.trx" | head -1 | grep -o '[0-9]*')
            failed=$(grep -o 'failed="[0-9]*"' "./TestResults/${{ matrix.datasource }}-results.trx" | head -1 | grep -o '[0-9]*')
          
            echo "total=${total:-0}" >> $GITHUB_OUTPUT
            echo "passed=${passed:-0}" >> $GITHUB_OUTPUT
            echo "failed=${failed:-0}" >> $GITHUB_OUTPUT
          else
            echo "total=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.datasource }}-results
          path: ./TestResults/**/*
          retention-days: 30

      - name: Fail if tests failed
        if: steps.test-run.outcome == 'failure'
        run: exit 1
    
    outputs:
      total: ${{ steps.parse.outputs.total }}
      passed: ${{ steps.parse.outputs.passed }}
      failed: ${{ steps.parse.outputs.failed }}

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, integration-tests]
    if: always()
    
    steps:
      - name: Download results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Generate summary
        run: |
          echo "# Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Data Source | Status | Total | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for dir in test-results/*-results; do
            if [ -d "$dir" ]; then
              datasource=$(basename "$dir" | sed 's/-results//')
              trx=$(find "$dir" -name "*.trx" | head -1)
          
              if [ -f "$trx" ]; then
                total=$(grep -o 'total="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*')
                passed=$(grep -o 'passed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*')
                failed=$(grep -o 'failed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*')
          
                if [ "${failed:-0}" -eq 0 ]; then
                  status="PASS"
                else
                  status="FAIL"
                fi
          
                echo "| $datasource | $status | ${total:-0} | ${passed:-0} | ${failed:-0} |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

  notify:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: failure() && github.event_name == 'schedule'
    
    steps:
      - name: Create issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Integration Tests Failed - ${date}`;
            const body = `## Test Failure Report
            
            Date: ${date}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            One or more data source integration tests failed.
            
            ### Actions Required
            
            1. Check external API status
            2. Review test logs
            3. Update mappers if API changed
            4. Verify network connectivity
            
            ### Links
            
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Test Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            `;
            
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['integration-test-failure']
            });
            
            const existing = issues.data.find(issue => issue.title.includes(date));
            
            if (!existing) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['integration-test-failure', 'automated']
              });
            }